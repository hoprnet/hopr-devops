name: 'Terraform'

on:
  push:
    branches:
    - master
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    # Checkout the repository to the GitHub Actions runner
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Create default credentials for Terraform from the GitHub secrets variable
    - name: Setup Google Cloud Credentials
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        export_default_credentials: true

    # Ensuring the stored credentials have the proper information
    - name: Reviewing gcloud setup
      run: gcloud info

    # CH (Develop)

    # Ensure we have Daneel's key in our filesystem before we add it to our servers as part of our setup
    - name: Setup Daneel's key in CH (Develop)
      working-directory: ch/develop/services/hopr-001
      run: echo ${{ secrets.SSH_PUB_KEY }} > key.pub
  
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ch/develop/services/hopr-001
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      working-directory: ch/develop/services/hopr-001
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ch/develop/services/hopr-001
      run: terraform plan
    
      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      working-directory: ch/develop/services/hopr-001
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve

    - name: Output IP from Terraform
      working-directory: ch/develop/services/hopr-001
      run: echo $(terraform output ipv4)